-----------------------------------------------------------
    Your First Web Pages
-----------------------------------------------------------
---Getting Started
Attributes:
- use double quotes when possible
- boolean attributes don't need an `=` or a value
- every HTML element may contain one or more attributes or none at all
- most attributes are specific to individual tags
- browsers do no check whether your attributes are valid (they'll just ignore them if they're not)

---Creating an HTML Skeleton
Typical HTML skeleton:
[html]
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Title</title>
  <meta charset="utf-8" />
</head>
<body>
</body>
</html>
[/html]

DOCTYPE:
- Document Type Definition or DTD
- isn't part of HTML, merely a message that tells browser specific markup language to expect
- must be the first item in an HTML document, not even whitespace can precede
- must use uppercase when defining versions of HTML before HTML5 or non-HTML languages such as XML

`html`:
- encloses entire HTML document
- attribute `lang="en"` informs user's browser which language to use

`head`:
- encloses document header, which consists of elements that provide meta-information to the browser
- `title` gives the page a title
- `<meta charset="utf-8">` tells the browser to expect the UTF-8 encoding, which is used by most web pages

`body`:
- the content area of the page

---Classes, IDs, and Names
Classes:
- identifies a set of page elements that you wish to style consistently
- any number of elements may belong to the same class
- any elements can belong to one or more classes
- prefer semantic class names (they should provide meaning)
- class selectors have lower CSS specificity than ID selectors, but higher than tag name selectors

IDs:
- applies a unique identification string to a single element
- each element can have one ID or none
- use semantic ID names (they should provide meaning)
- #the browser won't tell you when you use the same ID on more than one element#

Names:
- ties form elements to data on the server
- typically doesn't play a role in styling
- when submitting a form, the browser sends the form data to the server using name/value pairs
- not all tags accept the `name` attribute; it applies to input controls on forms
- always use a `name` attribute on form elements that accept it
- use descriptive `name` values, not semantic
- avoid trying to select elements in CSS by using the `name` attribute

---Walkthrough Project: A Simple Web Page
It is possible to pre-format text using the `<pre>` tag, but, in general, it's a poor choice.

HTML entities:
- an ampersand followed by one or more alphanumeric characters terminated by a semicolon
- example: use &lt; and &gt; for literal < and > characters (there are thousands of these entities)
- for safety, replace `&` with `&amp;` even when not needed
- all entities also have numeric version (`&#38;` is equivalent to `&amp;`) but alphanumeric is preferred

`strong`, `em`, `b`, and `i`:
strong: The text has greater importance than the surrounding text; most browsers use boldface. Example: You *must* remember to turn the light off.
em: Adds emphasis to the text; most browsers use italics. Example: We do them because they are #hard#!
b: Stylistically offset text, such as keywords. Example: ES6 adds the keywords *const* and *let*.
i: Alternate voice text. Example: I said "Hello." She said #"Goodbye."#

---Guided Project: A Personal Profile
`target="_blank"`:
- attribute of an anchor element that tells the browser that it should open the link in a separate tab or window
- typically used when linking to a different site

---Practice Problems: CSS Selectors
Add a `>` after a selector to tell the browser we only want direct children (e.g. `ul > li`)

---HTML and CSS Style Guide
HTML:
- avoid cramming more than two elements on a single line
- use `/>` with self-closing tags
- with Flex or Grid, place the most significant content blocks near the top of the file

CSS:
- don't put more than one property on the same line
- exception to above rule is when using *fallbacks* (fallback properties to support older browses)
