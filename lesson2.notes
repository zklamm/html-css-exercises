-----------------------------------------------------------
    The Box Model
-----------------------------------------------------------
---Everything is a Box
- every element requires a box-shaped segment of the page
- every character of text content also needs a boxed portion of the page
- the browser calculates the dimensions of that box by using the browser defaults and CSS

Box Properties:
- width/height: horizontal and vertical space needed for the content area of the box, which may or may not include the padding and borders
- padding: area that surrounds the content area of the box and separates the content from its border, typically opaque and hides anything that it overlays
- border: boundary that surrounds the padding
- margin: transparent area that lies outside the border and supplies separation between elements
- display: determines how the browser lays out an element relative to its neighbors

---The Visual Formatting Model
The `display` property of an element is called the visual formatting model.

Block Elements:
- by default, a `block` element occupies all horizontal space available within its container, with nothing to the left or right of the block
- though a `block` element takes up an entire row in a container, this does not alter the width of the element
- you can convert any element to a `block` element with the `display: block` CSS property

Inline Elements:
- handle left and right margins and left and right padding the same way as `block` elements
- ignore the width and height properties (except with `img` element), but instead use values calculated from the element content
- ignore top and bottom margins
- don't ignore borders, but the results may look odd
- don't ignore top and bottom padding, but you won't notice this unless you have a border or background
- you can convert any element to an `inline` element with the `display: inline` CSS property
- the left/right factors affect the flow, while the top and bottom do not

Inline-Block Elements:
- mixture of both previous types
- act like `block` elements except that they do not take up an entire row when the `width` property is less than the available width
- differ from `inline` in that they observe the `width` and `height` properties
- typically no inconsistencies in how browsers set default display, but if there is you can explicitly set the property
- contrary to popular belief, `img` elements are `inline`, not `inline-block`
- you can convert any element to an `inline-block` element with the `display: inline-block` CSS property
- horizontal navigation bars often use list elements defined as `inline-block`

You cannot nest `block` and `inline-block` elements within `inline` elements (there is an exception with `a` tags but it is seldom used).

There are several other diplay models:
- list items deault to a `list-item` display model
- table cells have a `table-cell` display model
- `flex` and `grid` are two newer display models that are gaining popularity because of the problems they solve

---Box Sizing
The usable `box-sizing` property values are `content-box` and `border-box`

`content-box`:
- the default for all elements in all modern browsers
- the `width` and `height` properties specify the size of the actual content area
- need to add padding and borders to get the size of the visible box

`border-box`:
- causes the browser to interpret the `width` and `height` properties as the total width and height of the box excluding the margins (the width and height include the content area as well as the padding and borders)
- "best" since it simplifies the math
- to use border-box pretty much everywhere, add the following to your CSS:
[css]
html {
  box-sizing: border-box;
}

*, *::before, *::after {
  box-sizing: inherit;
}
[/css]
Code is explained here: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/

---Padding and Margins
- margins are typically transparent while the padding is opaque
- padding is part of the visible and clickable bounds of an element, while a margin is spacing between adjacent elements
- if you position two adjacent `block`s one above the other, the margin between them isn't the sum of the bottom margin of the first and the top margin of the second, but the margin collapes to the larger of the two margins in question
- margin collapse occurs with top and bottom margins, not with left and right margins
- padding does not collapse
- guideline: use padding to separate the left and right sides of a conatiner from its content, use margins for the vertical gap

---Dimensions
