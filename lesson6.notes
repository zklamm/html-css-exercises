-----------------------------------------------------------
    Advanced Layout
-----------------------------------------------------------
---Floats
As we've seen elsewhere, you need some pretty ugly hacks when you need to collapse the whitespace between two side-by-side `inline-block` elements...floating them is one potential fix

Floats:
- tells the browser to move the element as far to the left or right as possible but to leave the remaining space available for additional content
- elements float within their immediate container
- if you float two elements in a row in the same direction, their vertical edges (counting their margins) will touch, providing they fit in the same row
- any whitespace (other than margins and padding) that would otherwise appear between the elements will collapse
- make sure all floats in a group have the same height and direction (left or right), and they will wrap logically

---Containing Floats
A typical problem with floats is that their containers will be partially overwritten by the floated elements

Two ways to contain floats:
1. `overflow: hidden` (or `overflow: auto`): there are some edge cases associated with these
2. clearfix: employs an invisible block element as the last child element of the container and the `clear` property

An example of a clearfix:
[css]
#columns::after { /* This rule is the clearfix */
  clear: both;
  content: "";
  display: block;
}
[/css]

---Positioning
Offset properties:
- `top`, `right`, `bottom`, `left`
- each offset measures the *inward* distance from the side of the container named by the offset property

The `position` Property:
- `static`: the default and is not affected by offset properties
- `relative`: moves an element to a position relative to where the browser would otherwise put it, but this does not remove the element from the document flow
- `absolute`: moves the element to a new position within a container element (by default, the container is the nearest ancestor element that has a `relative`, `absolute`, or `sticky` `position` property) and removes the element from the document flow
- `fixed`: sets an element to a fixed position within the window and does not move if the user scrolls

---Flex and Grid
Flex: a one-dimensional layout tool; you can layout a single row or column with a single flexbox
Grid: a two-dimensional layout tool; you can place elements in a grid

---CSS Frameworks
Most common are Twitter Bootstrap and Foundation (#I think learning CSS Grid is the way to go#)

---Responsive Design
Media Queries: define styles that change based on the current size of the browser window

Example media query:
[css]
/* CSS for all cell phones and shared cross-browser CSS */

@media screen and (min-width: 481px) {
  /* CSS for tablets and larger */
}

@media screen and (min-width: 961px) {
  /* CSS for small desktop and laptop screens and larger */
}

@media screen and (min-width: 1501px) {
  /* CSS for large laptop and desktop displays */
}

@media print {
  /* CSS for printers */
}
[/css]

- Check MDN documentation for media queries for more info.
- Most developers consider the mobile-first approach to be best-practice
- Chrome includes emulations of most popular devices via the dev tools

Use this tag if you design your app with responsiveness:
[html] <meta name="viewport" content="width=device-width, initial-scale=1" /> [/html]
*But do not use it if your website has no responsiveness*

Fluid and Liquid Layouts:
- liquid layouts often employ percentage values for widths to maintain the same width ratios for content areas as the browser width changes
- fluid layouts expand and collapse like a liquid layout to a point, then become fixed once the browser width reaches a specific size